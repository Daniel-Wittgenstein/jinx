$_PLUGIN.add({"isPlugin":true,"appName":"jinx","compatiblewithVersions":["0.1"],"name":"Simple Interface","id":"simpleInterface","author":"Jinx Core Team","copyrightInfo":":(c) 2023 Jinx Core Team","version":"0.0.1","licenseShort":"Public Domain","links":[],"licenseText":"I release this into the public domain.","shortInfo":"Simple interface plugin.","documentation":"\r\n<h2>About</h2>\r\n<p>\r\n    This plugin provides a simple standard user\r\n    interface with save, load and undo functionality.\r\n</p>\r\n\r\n<h2>Maximum undo</h2>\r\n<p>\r\n    By default, the player can undo 7 turns.\r\n    To change this, put this line at the beginning of your game:\r\n</p>\r\n\r\n<pre>\r\n    # simpleInterface.setMaxUndo(5) \r\n</pre>\r\n\r\n<p>\r\n    The above example would set the maximum undo limit to 5 turns.\r\n    Setting this number to somewhere between 0 (no undo at all) and 20\r\n    is reasonable. (Theoretically you could go up to one million and higher,\r\n    but the higher this number is, the more memory your game will eat up.)\r\n    Also, do not use this command twice in the same story.\r\n</p>\r\n\r\n<h2>Changing button texts</h2>\r\n\r\nHere's how you can change the button texts (for example for localization).\r\nFor example, for a German game, you might want to put this at the beginning of your game:\r\n\r\n<pre>\r\n    # simpleInterface.setButtonText(\"load\", \"Laden\")\r\n    # simpleInterface.setButtonText(\"save\", \"Speichern\")\r\n    # simpleInterface.setButtonText(\"erase\", \"Laden\")\r\n    # simpleInterface.setButtonText(\"undo\", \"Rückgängig\")\r\n</pre>\r\n\r\n\r\n\r\n\r\n","builtIn":true,"enabledByDefault":false,"logo":"<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><g class=\"\" style=\"\" transform=\"translate(0,0)\"><path d=\"M459.15 269.75a133.197 133.197 0 0 1-55.862 179.975l-42.782 22.541-10.52 5.533a71.277 71.277 0 0 1-62.966 1.685l-167.077-71.38 15.733-46.676 99.363 19.194-51.458-97.78-82.843-157.411 40.357-21.232 82.844 157.457 19.934-10.485-36.521-69.445 40.335-21.22 36.52 69.445 19.935-10.485-28.2-53.598 40.358-21.232 28.2 53.598 19.945-10.576-19.354-36.886 40.346-21.174 19.354 36.885 54.348 103.301zM73.268 146.674a60.03 60.03 0 0 1 42.361-102.459 60.098 60.098 0 0 1 56.58 80.169l10.588 20.013A78.29 78.29 0 0 0 115.708 26a78.233 78.233 0 0 0-5.635 156.262L99.428 162.02a59.688 59.688 0 0 1-26.16-15.346z\" fill=\"#fff\" fill-opacity=\"1\"></path></g></svg>","licenseTextMustBeIncludedInFinalGame":false,"bundlerOutputFileName":"simpleinterface","implementation":{"js":";(function() {\r\n\r\n\r\n  \r\n  const buttonTexts = {\r\n    load: \"load\",\r\n    save: \"save\",\r\n    undo: \"undo\",\r\n    erase: \"erase\",\r\n  }\r\n\r\n  const userInterface = {\r\n    setMaxUndo(num) {\r\n      if (  !utils.isInteger(num) ) {\r\n        throw new Error(`setMaxUndo expects an integer number`)\r\n      }\r\n      if (  num < 0 ) {\r\n        throw new Error(`setMaxUndo must be at least 0`)\r\n      }\r\n      maxUndoStates = num\r\n    },\r\n    setButtonText(prop, text) {\r\n      buttonTexts[prop] = text\r\n      const el = document.getElementById(`${domPrefix}${prop}`)\r\n      el.innerHTML = text\r\n    },\r\n  }\r\n  window.simpleInterface = userInterface\r\n\r\n  const pluginName = \"plugin simpleInterface\"\r\n  const domPrefix = \"X-simple-interface-plugin-\"\r\n\r\n  jin.createEffect(\"loadApp\", initStuff, 20)\r\n\r\n  let undoStates = []\r\n  let maxUndoStates = 7 //7 is default setting\r\n\r\n  function initStuff() {\r\n\r\n    if (jin.simpleInterface) {\r\n      jin.error(`Namespace clash: plugin jin.simpleInterface exists already?`)\r\n      return\r\n    }\r\n    const el = document.getElementById(\"app\")\r\n    if (!el) {\r\n      jin.error(`\\${pluginName}: the plugin cannot work without a div with id \"app\"`)\r\n      return\r\n    }\r\n    const bar = document.createElement('div')\r\n    bar.style = `margin-bottom: 20px;`\r\n    bar.innerHTML = `\r\n      <button id=\"${domPrefix}load\">load</button>\r\n      <button id=\"${domPrefix}save\">save</button>\r\n      <button id=\"${domPrefix}erase\">erase</button>\r\n      <button id=\"${domPrefix}undo\">undo</button>\r\n    `\r\n    el.prepend(bar)\r\n    const loadEl = document.getElementById(`${domPrefix}load`)\r\n    loadEl.addEventListener(\"click\", clickLoad)\r\n    const saveEl = document.getElementById(`${domPrefix}save`)\r\n    saveEl.addEventListener(\"click\", clickSave)\r\n    const undoEl = document.getElementById(`${domPrefix}undo`)\r\n    undoEl.addEventListener(\"click\", clickUndo)\r\n    const eraseEl = document.getElementById(`${domPrefix}erase`)\r\n    eraseEl.addEventListener(\"click\", clickErase)\r\n\r\n    jin.createEffect (\"initTurn\", () => {\r\n      const undoState = JSON.parse( JSON.stringify( jin.getState() ) )\r\n      undoStates.push(undoState)\r\n      if (undoStates.length > maxUndoStates) {\r\n        undoStates.shift()\r\n      }\r\n    }, -100_000)\r\n\r\n  }\r\n\r\n\r\n  function logUndoStack() {\r\n    console.log(`####### CURRENT UNDO STACK ENTRIES: #######`)\r\n    let index = -1\r\n    for (let s of undoStates) {\r\n      index++\r\n      const c = s.outputContainers.main.content\r\n      let out = \"\"\r\n      out += c.paragraphs.reduce(\r\n        (total, par) => {return total += par.text + \"      \"},\r\n        \"\")\r\n      out += c.choices.reduce(\r\n        (total, choice) => {return total += \"+ \" + choice.text + \"      \"},\r\n        \"\")\r\n      console.log(index, out)\r\n    }\r\n    console.log(\"### undo stack end ###\")\r\n\r\n  } \r\n\r\n  function clickUndo() {\r\n    if (undoStates.length < 1) {\r\n      alert(\"nothing to undo\")\r\n      return\r\n    }\r\n    const state = undoStates.pop()\r\n    jin.setState(state)\r\n  }\r\n\r\n\r\n  function clickLoad() {\r\n    const state = localStorage.getItem(\"basicSaveState\")\r\n    if (!state) {\r\n      alert(\"Nothing to load.\")\r\n      return\r\n    }\r\n    const stateParsed = JSON.parse(state)\r\n    jin.setState(stateParsed)\r\n    undoStates = []\r\n\r\n  }\r\n\r\n  function clickSave() {\r\n    const state = jin.getState()\r\n    const stateJson = JSON.stringify(state)\r\n    localStorage.setItem(\"basicSaveState\", stateJson)\r\n  }\r\n\r\n  function clickErase() {\r\n    localStorage.setItem(\"basicSaveState\", \"\")\r\n  }\r\n\r\n  \r\n})();","css":"body {\r\n  background: #fd0 !important;\r\n\r\n}"}})